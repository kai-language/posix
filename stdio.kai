
#library "libc"

File :: rawptr

#foreign libc #callconv "c" {
    clearerr :: (stream: File) -> void
    fclose   :: (stream: File) -> i32
    feof     :: (stream: File) -> i32
    ferror   :: (stream: File) -> i32
    fflush   :: (stream: File) -> i32
    fgetc    :: (stream: File) -> i32
    fgetpos  :: (stream: File, pos: *i64) -> i32
    fgets    :: (str: *u8, count: i32, stream: File) -> *u8
    fopen    :: (filename: *u8, mode: *u8) -> File
    fprintf  :: (stream: File, format: *u8, args: #cvargs ..any) -> i32
    fputc    :: (ch: i32, stream: File) -> i32
    fputs    :: (str: *u8, stream: File) -> i32
    fread    :: (buffer: rawptr, size: u64, count: u64, stream: File) -> u64
    freopen  :: (filename: *u8, mode: *u8, stream: File) -> File
    fscanf   :: (stream: File, format: *u8, args: #cvargs ..any) -> i32
    fseek    :: (stream: File, offset: i64, origin: i32) -> i32
    fsetpos  :: (stream: File, pos: *i64) -> i32
    ftell    :: (stream: File) -> i64
    fwrite   :: (buffer: rawptr, size: u64, count: u64, stream: File) -> u64
    getc     :: (stream: File) -> i32
    getchar  :: () -> i32
    gets     :: (*u8) -> *u8
    perror   :: (*u8) -> void
    printf   :: (format: *u8, args: #cvargs ..any) -> i32
    putc     :: (ch: i32, stream: File) -> i32
    putchar  :: (ch: i32) -> i32
    puts     :: (*u8) -> i32
    remove   :: (path: *u8) -> i32
    rename   :: (old: *u8, new: *u8) -> i32
    rewind   :: (stream: File) -> void
    scanf    :: (format: *u8, args: #cvargs ..any) -> i32
    setbuf   :: (stream: File, buffer: *u8) -> void
    setvbuf  :: (stream: File, buffer: *u8, mode: i32, size: u64) -> i32
    sprintf  :: (buffer: *u8, format: *u8, args: #cvargs ..any) -> i32
    sscanf   :: (buffer: *u8, format: *u8, args: #cvargs ..any) -> i32
    tmpfile  :: () -> File
    tmpnam   :: (filename: *u8) -> *u8
    ungetc   :: (ch: i32, stream: File) -> i32

    ctermid :: (buf: *u8) -> *u8

    fdopen   :: (fd: i32, mode: *u8) -> File
    fileno   :: (stream: File) -> i32

    pclose   :: (stream: File) -> i32
    popen    :: (cmd: *u8, mode: *u8) -> File

    flockfile        :: (file: File) -> void
    ftrylockfile     :: (file: File) -> i32
    funlockfile      :: (file: File) -> void
    getc_unlocked    :: (file: File) -> i32
    getchar_unlocked :: () -> i32
    putc_unlocked    :: (char: i32, stream: File) -> i32
    putchar_unlocked :: (char: i32) -> i32

    getw :: (stream: File) -> i32
    putw :: (char: i32, stream: File) -> i32

    fseeko :: (stream: File, offset: i64, whence: i32) -> i32
    ftello :: (stream: File) -> i64

    snprintf :: (str: *u8, size: u64, format: *u8, args: #cvargs ..any) -> i32

    dprintf  :: (fd: i32, format: *u8, args: #cvargs ..any) -> i32
    getdelim :: (linep: **u8, linecapp: *u64, delimiter: i32, stream: File) -> i64
    getline  :: (linep: **u8, linecapp: *u64, stream: File) -> i64
    fmemopen :: (buffer: rawptr, size: u64, mode: *u8) -> File
    open_memstream :: (bufp: **u8, sizep: u64) -> File
}

