
/* open-only flags */
O_RDONLY    :: 0x0000 /* open for reading only */
O_WRONLY    :: 0x0001 /* open for writing only */
O_RDWR      :: 0x0002 /* open for reading and writing */
O_ACCMODE   :: 0x0003 /* mask for above modes */
O_NONBLOCK  :: 0x0004 /* no delay */
O_SYNC      :: 0x0080 /* synch I/O file integrity */
O_DSYNC     :: 0x400000 /* synch I/O data integrity */
O_APPEND    :: 0x0008 /* set append mode */
O_NOFOLLOW  :: 0x0100 /* don't follow symlinks */
O_CREAT     :: 0x0200 /* create if nonexistant */
O_TRUNC     :: 0x0400 /* truncate to zero length */
O_EXCL      :: 0x0800 /* error if already exists */
O_DIRECTORY :: 0x100000 /* Fail if file is non-directory file */
O_NOCTTY    :: 0x20000 /* don't assign controlling terminal */
O_CLOEXEC   :: 0x1000000 /* implicitly set FD_CLOEXEC */

/*
 * Descriptor value for the current working directory
 */
AT_FDCWD :: -2

/*
 * Flags for the at functions
 */
AT_EACCESS          :: 0x0010 /* Use effective ids in access check */
AT_SYMLINK_NOFOLLOW :: 0x0020 /* Act on the symlink itself not the target */
AT_SYMLINK_FOLLOW   :: 0x0040 /* Act on target of symlink */
AT_REMOVEDIR        :: 0x0080 /* Path refers to directory */

/*
 * Constants used for fcntl(2)
 */

/* command values */
F_DUPFD  :: 0 /* duplicate file descriptor */
F_GETFD  :: 1 /* get file descriptor flags */
F_SETFD  :: 2 /* set file descriptor flags */
F_GETFL  :: 3 /* get file status flags */
F_SETFL  :: 4 /* set file status flags */
F_GETOWN :: 5 /* get SIGIO/SIGURG proc/pgrp */
F_SETOWN :: 6 /* set SIGIO/SIGURG proc/pgrp */
F_GETLK  :: 7 /* get record locking information */
F_SETLK  :: 8 /* set record locking information */
F_SETLKW :: 9 /* F_SETLK; wait if blocked */

F_DUPFD_CLOEXEC :: 67 /* mark the dup with FD_CLOEXEC */

/* file descriptor flags (F_GETFD, F_SETFD) */
FD_CLOEXEC :: 1 /* close-on-exec flag */

/* record locking flags (F_GETLK, F_SETLK, F_SETLKW) */
F_RDLCK :: 1 /* shared or read lock */
F_UNLCK :: 2 /* unlock */
F_WRLCK :: 3 /* exclusive or write lock */

SEEK_SET :: 0 /* set file offset to offset */
SEEK_CUR :: 1 /* set file offset to current plus offset */
SEEK_END :: 2 /* set file offset to EOF plus offset */

/*
 * Advisory file segment locking data type -
 * information passed to system by user
 */
flock :: struct {
    start: i64, /* starting offset */
    len: i64, /* len = 0 means until end of file */
    pid: i32, /* lock owner */
    type: i16, /* lock type: read/write, etc. */
    whence: i64 /* type of l_start */
}

#library "libc"

#foreign libc #callconv "c" {
    open :: (path: *u8, flags: i32, mode: #cvargs ..u16) -> i32
    openat :: (fd: i32, path: *u8, oflag: i32, mode: #cvargs ..u16) -> i32

    creat :: (path: *u8, mode: u16) -> i32
    fcntl :: (fildes: i32, cmd: i32, args: #cvargs ..any) -> i32
}
